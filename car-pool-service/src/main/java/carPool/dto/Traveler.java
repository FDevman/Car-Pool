package carPool.dto;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;

import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;

import carPool.domain.Gender;
import carPool.domain.GeoPosition;

/**
 * <h2>Class to represent a Traveler.</h2>
 *
 * <p>
 * An instance of this class represents a DTO Traveler. A DTO Traveler includes
 * a subset of Traveler data, and DTO Travelers objects are exchanged between
 * clients and the Traveler Web service.
 * </p>
 *
 * <h4>A DTO Traveler is described by:</h4>
 * <p>
 * - Personal details: email, username, gender, home address, current location;
 * </p>
 * <p>
 * - Last know location: latitude/longitude position.
 * </p>
 *
 * <p>
 * A Traveler is uniquely identified by an id value of type long.
 * </p>
 *
 */
@XmlRootElement(name = "Traveler")
@XmlAccessorType(XmlAccessType.FIELD)
public class Traveler {

	@XmlAttribute(name = "id")
	private long _id;

	@XmlElement(name = "email")
	private String _email;

	@XmlElement(name = "username")
	private String _username;

	@XmlElement(name = "gender")
	private Gender _gender;

	@XmlElement(name = "home")
	private GeoPosition _home;

	@XmlElement(name = "location")
	private GeoPosition _location;

	/**
	 * Constructs a DTO Traveler instance. This method is intended to be called
	 * by web service clients when creating new Travelers. This id field is not
	 * required because it is generated by the web service. Similarly, the
	 * location field is not required. Of the constructor's parameters, all
	 * fields must be non-null.
	 *
	 * @param email
	 * @param username
	 * @param gender
	 * @param home
	 */
	public Traveler(String email, String username, Gender gender, GeoPosition home) {
		_email = email;
		_username = username;
		_gender = gender;
		_home = home;
		_location = home;

	}

	/**
	 * Constructs a DTO Traveler instance. This method should NOT be called by
	 * Web Service clients. It is intended to be used by the Web Service
	 * implementation when creating a DTO Traveler from a domain-model Traveler
	 * object.
	 *
	 * @param id
	 * @param email
	 * @param username
	 * @param gender
	 * @param home
	 * @param location
	 */
	public Traveler(long id, String email, String username, Gender gender, GeoPosition home, GeoPosition location) {
		_id = id;
		_username = username;
		_gender = gender;
		_home = home;
		_location = location;
	}

	public long getID() {
		return _id;
	}

	public void setID(long _id) {
		this._id = _id;
	}

	public String getEmail() {
		return _email;
	}

	public void setEmail(String _email) {
		this._email = _email;
	}

	public String getUsername() {
		return _username;
	}

	public void setUsername(String _username) {
		this._username = _username;
	}

	public Gender getGender() {
		return _gender;
	}

	public void setGender(Gender _gender) {
		this._gender = _gender;
	}

	public GeoPosition getHome() {
		return _home;
	}

	public void setHome(GeoPosition _home) {
		this._home = _home;
	}

	public GeoPosition getLocation() {
		return _location;
	}

	public void setLocation(GeoPosition _location) {
		this._location = _location;
	}

	@Override
	public boolean equals(Object obj) {
		if (!(obj instanceof Traveler)) {
			return false;
		}
		if (obj == this) {
			return true;
		}
		Traveler t = (Traveler) obj;
		return new EqualsBuilder().append(_id, t._id).append(_email, t._email).append(_username, t._username)
				.append(_gender, t._gender).append(_home, t._home).append(_location, t._location).isEquals();
	}

	@Override
	public int hashCode() {
		return new HashCodeBuilder(17, 31).append(_id).append(_email).append(_username).append(_gender).append(_home)
				.append(_location).toHashCode();
	}

}
